import json

import openai
from django.conf import settings
from django.http import StreamingHttpResponse
from django.shortcuts import render

from .forms import ChatForm

openai.api_key = settings.OPENAI_API_KEY


def chat_view(request):
    def event_stream():
        query = request.GET.get("query", "")
        prompts = "'(n)'이라는 문자열로 구분된 입력값 중 첫번째는 취약점 종류, 두번째는 취약점을 찾기 위한 입력값인데\
                    이 취약점을 막기 위한 시큐어코딩 방법을 php, jsp, python 등을 이용하여 예시를 작성해 줘\
                    정의 및 개념에 대한 자세한 설명, php, jsp, python, 관련 실제 공격 사례 순으로 5단계로 작성하고, 정의 및 개념은 쉽게 이해할 수 있게, 코드는 주석과 함께, 사례는 최신 사례로 2개 작성해줘.\
                    각 파트의 처음 시작하는 부분을 '----'으로 나눠주고 대신 각 파트의 제목은 본문에 안써줘도 돼"
        response = openai.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": prompts},
                {"role": "user", "content": query},
            ],
            stream=True,
        )
        for chunk in response:
            if chunk.choices[0].delta.content is not None:
                content = chunk.choices[0].delta.content
                print(content)
                yield f"data: {json.dumps({'message': content})}\n\n"

    return StreamingHttpResponse(event_stream(), content_type="text/event-stream")


def input_view(request):
    if request.method == "POST":
        form = ChatForm(request.POST)
        if form.is_valid():
            query = form.cleaned_data["query"]
            return render(request, "chat.html", {"query": query})
    else:
        form = ChatForm()

    return render(request, "input.html", {"form": form})
