from django.contrib.auth import login
from django.shortcuts import get_object_or_404, redirect, render
from django.urls import reverse

from .forms import CustomUserCreationForm
from .models import AttackingQuestion, SecureCodingQuestion


def index(request):
    return render(request, "landing.html")


def signup(request):
    if request.method == "POST":
        form = CustomUserCreationForm(request.POST)
        if form.is_valid():
            user = form.save()
            login(request, user)
            return redirect("index")
    else:
        form = CustomUserCreationForm()
    return render(request, "registration/signup.html", {"form": form})


def about(request):
    return render(request, "header/about.html")


def how_to_play(request):
    return render(request, "header/how_to_play.html")


def qna(request):
    return render(request, "header/qna.html")


def question_list(request):
    attacking_questions = AttackingQuestion.objects.all()
    secure_coding_questions = SecureCodingQuestion.objects.all()
    return render(
        request,
        "solve/question_list.html",
        {
            "attacking_questions": attacking_questions,
            "secure_coding_questions": secure_coding_questions,
        },
    )


def attacking(request, type):
    question = get_object_or_404(AttackingQuestion, type=type)
    injection_successful = False
    injection_unsuccessful = False
    if request.method == "POST":
        last_name = request.POST.get("last_name")

        query = f"SELECT * FROM user_data WHERE first_name = 'John' AND last_name = '{last_name}'"

        if "Smith' OR '1'='1" in query:
            injection_successful = True
        else:
            injection_unsuccessful = True

    return render(
        request,
        f"solve/attacking-practice/{type}/question.html",
        {
            "injection_successful": injection_successful,
            "injection_unsuccessful": injection_unsuccessful,
            "hint": question.hint,
            "type": type,
        },
    )


def attacking_explanation(request, type):
    question = get_object_or_404(AttackingQuestion, type=type)
    query = "SELECT * FROM user_data WHERE first_name = 'John' AND last_name = 'Smith'"

    context = {"correct": True, "question": question, "query": query}

    return render(request, f"solve/attacking-practice/{type}/explanation.html", context)


def secure_coding(request, type):
    question = get_object_or_404(SecureCodingQuestion, type=type)
    securing_successful = False
    securing_unsuccessful = False
    if request.method == "POST":
        user_answer = request.POST.get("answer")
        if user_answer == question.correct_answer:
            securing_successful = True
        else:
            securing_unsuccessful = True

    return render(
        request,
        f"solve/secure-coding-practice/{type}/question.html",
        {
            "securing_successful": securing_successful,
            "securing_unsuccessful": securing_unsuccessful,
            "title": question.title,
            "content": question.content,
            "hint": question.hint,
            "type": type,
        },
    )


def secure_coding_explanation(request, type):
    question = get_object_or_404(SecureCodingQuestion, type=type)
    query = "SELECT * FROM user_data WHERE first_name = 'John' AND last_name = 'Smith'"

    context = {"correct": True, "question": question, "query": query}

    return render(
        request, f"solve/secure-coding-practice/{type}/explanation.html", context
    )
