import os

from django.contrib.auth import login
from django.http import HttpResponse
from django.shortcuts import get_object_or_404, redirect, render
from django.views.decorators.csrf import csrf_exempt

from .forms import CustomUserCreationForm
from .models import AttackingQuestion, SecureCodingQuestion

# BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


def index(request):
    return render(request, "landing.html")


def signup(request):
    if request.method == "POST":
        form = CustomUserCreationForm(request.POST)
        if form.is_valid():
            user = form.save()
            login(request, user)
            return redirect("index")
    else:
        form = CustomUserCreationForm()
    return render(request, "registration/signup.html", {"form": form})


def about(request):
    return render(request, "header/about.html")


def how_to_play(request):
    return render(request, "header/how_to_play.html")


def qna(request):
    return render(request, "header/qna.html")


def question_list(request):
    attacking_questions = AttackingQuestion.objects.all()
    secure_coding_questions = SecureCodingQuestion.objects.all()
    return render(
        request,
        "solve/question_list.html",
        {
            "attacking_questions": attacking_questions,
            "secure_coding_questions": secure_coding_questions,
        },
    )


@csrf_exempt
def attacking(request, type):

    if type == "sql-injection":
        question = get_object_or_404(AttackingQuestion, type=type)
        successful = False
        unsuccessful = False
        if request.method == "POST":
            last_name = request.POST.get("last_name")

            query = f"SELECT * FROM user_data WHERE first_name = 'John' AND last_name = '{last_name}'"

            if "Smith' OR '1'='1" in query:
                successful = True
            else:
                unsuccessful = True
    """
    elif type == "file-download":
        question = get_object_or_404(AttackingQuestion, type=type)
        successful = False
        unsuccessful = False

        if request.method == "GET":
            file_path = request.GET.get("file")

            if file_path:
                try:
                    if file_path == "../../../../../../../../etc/passwd":
                        successful = True
                        modified_path = "etc/passwd"
                        full_path = os.path.join(BASE_DIR, "uploads", modified_path)
                        uploads_dir = os.path.abspath(os.path.join(BASE_DIR, "uploads"))
                        full_path = os.path.abspath(full_path)

                        if os.path.commonpath([uploads_dir]) == os.path.commonpath(
                            [uploads_dir, full_path]
                        ) and os.path.exists(full_path):
                            successful = True

                            with open(full_path, "rb") as f:
                                response = HttpResponse(
                                    f.read(), content_type="application/octet-stream"
                                )
                                response["Content-Disposition"] = (
                                    f'attachment; filename="{os.path.basename(full_path)}"'
                                )
                                return response
                        else:
                            print("File does not exist or invalid path.")
                            unsuccessful = True
                    else:
                        unsuccessful = True
                except Exception as e:
                    print(f"Download failed: {e}")
                    unsuccessful = True
            else:
                print("No file path provided.")
    """
    return render(
        request,
        f"solve/attacking-practice/{type}/question.html",
        {
            "successful": successful,
            "unsuccessful": unsuccessful,
            "hint": question.hint,
            "type": type,
        },
    )


def attacking_explanation(request, type):

    if type == "sql-injection":
        question = get_object_or_404(AttackingQuestion, type=type)
        query = (
            "SELECT * FROM user_data WHERE first_name = 'John' AND last_name = 'Smith'"
        )

    elif type == "file-download":
        question = get_object_or_404(AttackingQuestion, type=type)
        # TODO: query 바꾸기
        query = (
            "SELECT * FROM user_data WHERE first_name = 'John' AND last_name = 'Smith'"
        )

    context = {"correct": True, "question": question, "query": query}

    return render(request, f"solve/attacking-practice/{type}/explanation.html", context)


def secure_coding(request, type):
    question = get_object_or_404(SecureCodingQuestion, type=type)
    securing_successful = False
    securing_unsuccessful = False
    if request.method == "POST":
        user_answer = request.POST.get("answer")
        if user_answer == question.correct_answer:
            securing_successful = True
        else:
            securing_unsuccessful = True

    return render(
        request,
        f"solve/secure-coding-practice/{type}/question.html",
        {
            "securing_successful": securing_successful,
            "securing_unsuccessful": securing_unsuccessful,
            "title": question.title,
            "content": question.content,
            "hint": question.hint,
            "type": type,
        },
    )


def secure_coding_explanation(request, type):
    question = get_object_or_404(SecureCodingQuestion, type=type)
    query = "SELECT * FROM user_data WHERE first_name = 'John' AND last_name = 'Smith'"

    context = {"correct": True, "question": question, "query": query}

    return render(
        request, f"solve/secure-coding-practice/{type}/explanation.html", context
    )
