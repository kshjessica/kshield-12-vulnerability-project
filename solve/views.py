from django.contrib.auth import login
from django.shortcuts import get_object_or_404, redirect, render
from django.urls import reverse
from django.db import connection
from django.http import HttpResponse
from .func import read_url
from .forms import CustomUserCreationForm
from .models import AttackingQuestion, SecureCodingQuestion
from enum import Enum
import urllib
import requests

class vulnType(Enum):
    SQL_INJECTION = "sql-Injection"
    XSS = "xss"
    CSRF = "csrf"
    SSRF = "ssrf"
    FILE_UPLOAD = "file-upload"
    FILE_DOWNLOAD = "file-download"
    ETC = "etc"

class solveType(Enum):
    SOLVE = 0
    WRONG = 1
    UNSOLVE = 2



def index(request):
    return render(request, "landing.html")


def signup(request):
    if request.method == "POST":
        form = CustomUserCreationForm(request.POST)
        if form.is_valid():
            user = form.save()
            login(request, user)
            return redirect("index")
    else:
        form = CustomUserCreationForm()
    return render(request, "registration/signup.html", {"form": form})


def about(request):
    return render(request, "header/about.html")


def how_to_play(request):
    return render(request, "header/how_to_play.html")


def qna(request):
    return render(request, "header/qna.html")


def question_list(request):
    attacking_questions = AttackingQuestion.objects.all()
    secure_coding_questions = SecureCodingQuestion.objects.all()
    return render(
        request,
        "solve/question_list.html",
        {
            "attacking_questions": attacking_questions,
            "secure_coding_questions": secure_coding_questions,
        },
    )

memo_text = ""
def attacking(request, type):
    question = get_object_or_404(AttackingQuestion, type=type)
    param = request.GET.get('param', 'default')
    if(type == vulnType.SQL_INJECTION.value):
        injection_error = solveType.UNSOLVE.value
        if request.method == 'POST':
            username = request.POST.get('username')
            password = request.POST.get('password')
            with connection.cursor() as cursor:
                cursor.execute("SELECT * FROM solve_sqlinj_1 WHERE username = '%s' AND password = '%s'" % (username, password))
                user = cursor.fetchone()
            if user:
                request.session['user_id'] = user[1]
                is_superuser = user[3]
                if is_superuser:
                    injection_error = solveType.SOLVE.value
                else:
                    injection_error = solveType.WRONG.value
            else:
                injection_error = solveType.WRONG.value
        return render(
            request,
            f"solve/attacking-practice/{type}/question.html",
            {
                "injection_error": injection_error,
                "hint": question.hint,
                "type": type,
            },
        )
    elif(type == vulnType.XSS.value):
        global memo_text
        xss_error = solveType.UNSOLVE.value
        text = request.GET.get('pleaseCookie', '쿠키를 넣어주세요')
        if request.method == "POST":
            param = request.POST.get('param', 'default')
            url = f"http://127.0.0.1:8000/xss_vuln?param={urllib.parse.quote(param)}"
            cookie = {"name": "mycookie", "value": "cookie_value"}
            read_url(url, cookie)
        print(text)
        if(text == 'mycookie=cookie_value'):
            print("solve")
            xss_error = solveType.SOLVE.value
        else :
            xss_error = solveType.UNSOLVE.value

        responce = render(
            request,
            f"solve/attacking-practice/{type}/question.html",
            {
                "xss_error": xss_error,
                "hint": question.hint,
                "type": type,
            },
        )
        return responce

def xss_vuln(request):
    param = request.GET.get('param', '')
    return HttpResponse(f"Vulnerable page with param: {param}")


#<script>location.href="/show-cookies?memo=11"</script>
#<script>location.href="/show-cookies?memo="+document.cookie</script>
memo_text = ""
def show_cookies(request):
    global memo_text
    text = request.GET.get('memo', '')
    if(text):
        memo_text += text + "\n"
    # 여기에서 쿠키 값을 읽어옵니다.
    mycookie_value = request.COOKIES.get('mycookie', 'Cookie not set')
    print("show"+mycookie_value)
    return render(request, f'solve/attacking-practice/xss/hi.html', {'memo': memo_text, 'mycookie': mycookie_value})


def attacking_explanation(request, type):
    question = get_object_or_404(AttackingQuestion, type=type)
    query = "SELECT * FROM user_data WHERE first_name = 'John' AND last_name = 'Smith'"

    context = {"correct": True, "question": question, "query": query}

    return render(request, f"solve/attacking-practice/{type}/explanation.html", context)


def secure_coding(request, type):
    question = get_object_or_404(SecureCodingQuestion, type=type)
    securing_successful = False
    securing_unsuccessful = False
    if request.method == "POST":
        user_answer = request.POST.get("answer")
        if user_answer == question.correct_answer:
            securing_successful = True
        else:
            securing_unsuccessful = True

    return render(
        request,
        f"solve/secure-coding-practice/{type}/question.html",
        {
            "securing_successful": securing_successful,
            "securing_unsuccessful": securing_unsuccessful,
            "title": question.title,
            "content": question.content,
            "hint": question.hint,
            "type": type,
        },
    )


def secure_coding_explanation(request, type):
    question = get_object_or_404(SecureCodingQuestion, type=type)
    query = "SELECT * FROM user_data WHERE first_name = 'John' AND last_name = 'Smith'"

    context = {"correct": True, "question": question, "query": query}

    return render(
        request, f"solve/secure-coding-practice/{type}/explanation.html", context
    )
