import os
import urllib
from enum import Enum

from django.contrib.auth import login
from django.http import HttpResponse
from django.shortcuts import get_object_or_404, redirect, render
from django.views.decorators.clickjacking import xframe_options_exempt
from django.views.decorators.csrf import csrf_exempt

from .forms import CustomUserCreationForm
from .func import *
from .models import AttackingQuestion, SecureCodingQuestion, ShortAnswerQuestion


class vulnType(Enum):
    SQL_INJECTION = "sql-injection"
    XSS = "xss"
    XSS_FILTER = "xss-filter"
    XSS_FILTER2 = "xss-filter2"
    CMD_INJECTION = "command-injection"
    CSRF = "csrf"
    SSRF = "ssrf"
    ETC = "etc"


class solveType(Enum):
    SOLVE = 0
    WRONG = 1
    UNSOLVE = 2


# file download 공격을 위한 BASE_DIR
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# csrf 공격을 위한 세션 저장소
session_storage = {"admin_session_id": "admin"}
users = {"guest": "guest", "admin": "admin_password"}


def index(request):
    return render(request, "landing.html")


def signup(request):
    if request.method == "POST":
        form = CustomUserCreationForm(request.POST)
        if form.is_valid():
            user = form.save()
            login(request, user)
            return redirect("index")
    else:
        form = CustomUserCreationForm()
    return render(request, "registration/signup.html", {"form": form})


def about(request):
    return render(request, "header/about.html")


def how_to_play(request):
    return render(request, "header/how_to_play.html")


def qna(request):
    return render(request, "header/qna.html")


def question_list(request):
    attacking_questions = AttackingQuestion.objects.all()
    secure_coding_questions = SecureCodingQuestion.objects.all()
    return render(
        request,
        "solve/question_list.html",
        {
            "attacking_questions": attacking_questions,
            "secure_coding_questions": secure_coding_questions,
        },
    )


@csrf_exempt
def attacking(request, type):
    successful = False
    unsuccessful = False
    output = ""
    question = get_object_or_404(AttackingQuestion, type=type)
    if type == vulnType.SQL_INJECTION.value:
        successful, question = sqlInjection(request, question)
    elif type == vulnType.XSS.value:
        successful, question, output = xss1(request, question)
    elif type == vulnType.XSS_FILTER.value:
        successful, question, output = xss_filter(request, question)
    elif type == vulnType.XSS_FILTER2.value:
        successful, question, output = xss_filter2(request, question)
    elif type == vulnType.CMD_INJECTION.value:
        successful, question, output = cmd_injection(request, question)
    elif type == "etc":
        successful = solveType.UNSOLVE.value
        answer = request.GET.get("answer", "")
        if(answer == "g00dby3_kshield.jr"):
            print("solve")
            successful = solveType.SOLVE.value
            question.status = "풀이 완료"
            question.save()
        else:
            successful = solveType.WRONG.value
            print(successful)
    elif type == "etc2":
        template = engine.from_string(
            "<html><body><form method=get><input name=injection><br><input type=submit></form><br>"
            + request.GET.get("injection")
            + "</body></html>"
        )
        return HttpResponse(template.render({}, request))
    
    elif type == "cookie":
        1
        
    return render(
        request,
        f"solve/attacking-practice/{type}/question.html",
        {
            "successful": successful,
            "unsuccessful": unsuccessful,
            "hint": question.hint,
            "status": question.status,
            "type": type,
            "data": output,
        },
    )


def attacking_explanation(request, type):
    if type == vulnType.SQL_INJECTION.value:
        query = (
            type
            + "(n)"
            + "SELECT * FROM user_data WHERE first_name = 'John' AND last_name = 'Smith'"
        )
    if type == vulnType.XSS.value:
        query = (
            type
            + "(n)"
            + '<script>location.href="/solve/attacking/xss?pleaseCookie="+document.cookie</script>'
        )
    if type == vulnType.XSS_FILTER.value:
        query = (
            type
            + "(n)"
            + '<scrionpt>locatioonn.href="/solve/attacking/xss-filter?pleaseCookie="+documonent.cookie</scrionpt>'
        )
    if type == vulnType.XSS_FILTER2.value:
        query = (
            type
            + "(n)"
            + '<iframe src="javascrip	t:fetch&lpar;\'/solve/attacking/xss-filter2?pleaseCookie=\'+docum	ent.cookie&rpar;"></iframe>'
        )
    if type == vulnType.CMD_INJECTION.value:
        query = (
            type
            + "(n)"
            + "8.8.8.8\"&&ls\""
        )
    question = get_object_or_404(AttackingQuestion, type=type)

    context = {"correct": True, "question": question, "query": query}

    return render(request, f"solve/attacking-practice/{type}/explanation.html", context)


def xss_vuln(request):
    param = request.GET.get("param", "")
    return HttpResponse(f"Vulnerable page with param: {param}")


def xss_vuln_filter(request):
    param = request.GET.get("param", "")
    param = textfilter(param)
    print(param)
    return HttpResponse(f"Vulnerable page with param: {param}")


@xframe_options_exempt
def xss_vuln_filter2(request):
    param = request.GET.get("param", "")
    param = textfilter2(param)

    text = urllib.parse.unquote(param)
    print(text)
    return HttpResponse(f"Vulnerable page with param: {param}")


def secure_coding(request, type):
    successful = False
    unsuccessful = False

    question = get_object_or_404(SecureCodingQuestion, type=type)

    if request.method == "POST":
        user_answer = request.POST.get("answer")
        if user_answer.strip() == question.correct_answer.strip():
            successful = True
            print("성공")
            question.status = "풀이 완료"
            question.save()
        else:
            unsuccessful = True

    return render(
        request,
        f"solve/secure-coding-practice/{type}/question.html",
        {
            "successful": successful,
            "unsuccessful": unsuccessful,
            "title": question.title,
            "content": question.content,
            "hint": question.hint,
            "correct_answer": question.correct_answer,
            "status": question.status,
            "type": type,
        },
    )


def secure_coding_explanation(request, type):
    question = get_object_or_404(SecureCodingQuestion, type=type)

    query = type + "(n)" + question.correct_answer

    context = {"correct": True, "question": question, "query": query}

    return render(
        request, f"solve/secure-coding-practice/{type}/explanation.html", context
    )


def short_answer_list(request):
    short_answer_questions = ShortAnswerQuestion.objects.all()
    return render(
        request,
        "solve/short_question_list.html",
        {"short_answer_questions": short_answer_questions},
    )


def short_answer_question(request, type):
    successful = False
    unsuccessful = False
    question = get_object_or_404(ShortAnswerQuestion, type=type)

    if type == "file-upload":
        if request.method == "POST":
            user_answer = request.POST.get("answer")
            if user_answer == "upload_file = request.FILES['upload_file']":
                successful = True
                question.status = "풀이 완료"
                question.save()
            else:
                unsuccessful = True

    elif type == "csrf":
        if request.method == "POST":
            user_answer = request.POST.get("answer")
            if user_answer == "@csrf_exempt":
                successful = True
                question.status = "풀이 완료"
                question.save()
            else:
                unsuccessful = True

    return render(
        request,
        f"solve/short-answer/{type}/question.html",
        {
            "successful": successful,
            "unsuccessful": unsuccessful,
            "hint": question.hint,
            "status": question.status,
            "type": type,
        },
    )


def short_answer_explanation(request, type):
    question = get_object_or_404(ShortAnswerQuestion, type=type)

    if type == "file-upload":
        query = type + "(n)" + "upload_file = request.FILES['upload_file']"

    elif type == "csrf":
        query = type + "(n)" + "csrf"

    context = {"correct": True, "question": question, "query": query}

    return render(request, f"solve/short-answer/{type}/explanation.html", context)
