[
  {
    "model": "solve.SecureCodingQuestion",
    "fields": {
      "title": "SQL Injection",
      "type": "sql-injection",
      "intro": "사용자 ID를 기반으로 이메일을 조회하는 Node.js 코드입니다.",
      "content": "const mysql = require(\"mysql\");\n// 커넥션 초기화 옵션은 생략함\nconst connection = mysql.createConnection(...);\nrouter.get(\"/vuln/email\", (req, res) => {\n const con = connection;\n const userInput = req.query.id;\n const query = `SELECT email FROM user WHERE user_id = ${userInput}`;\n con.query(query,\n (err, result) => {\n if (err) console.log(err);\n return res.send(result);\n }\n );\n});",
      "hint": "‘1 UNION SELECT group_concat(table_name) FROM information_schema.tables WHERE table_schema = database();’ 와 같은 공격문을 전달할 경우 데이터베이스 내의 모든 테이블 이름이 조회되고 이는 곧 공격자가 원하는 모든 쿼리를 실행 가능",
      "user_answer": "",
      "correct_answer": "SELECT email FROM user WHERE user_id =",
      "difficulty": "하",
      "status": "풀이하기",
      "tags": "nodejs, sql-injection"
    }
  },
  {
    "model": "solve.SecureCodingQuestion",
    "fields": {
      "title": "XSS",
      "type": "xss",
      "intro": "XSS 취약점이 존재하는 Node.js 코드입니다.",
      "content": "const mysql = require(\"mysql\");\n// 커넥션 초기화 옵션은 생략함\nconst connection = mysql.createConnection(...);\nrouter.get(\"/vuln/email\", (req, res) => {\n const con = connection;\n const userInput = req.query.id;\n const query = `SELECT email FROM user WHERE user_id = ${userInput}`;\n con.query(query,\n (err, result) => {\n if (err) console.log(err);\n return res.send(result);\n }\n );\n});",
      "hint": "‘1 UNION SELECT group_concat(table_name) FROM information_schema.tables WHERE table_schema = database();’ 와 같은 공격문을 전달할 경우 데이터베이스 내의 모든 테이블 이름이 조회되고 이는 곧 공격자가 원하는 모든 쿼리를 실행 가능",
      "user_answer": "",
      "correct_answer": "SELECT email FROM user WHERE user_id =",
      "difficulty": "하",
      "status": "풀이하기",
      "tags": "nodejs, sql-injection"
    }
  },
  {
    "model": "solve.SecureCodingQuestion",
    "fields": {
      "title": "CSRF",
      "type": "csrf",
      "intro": "CSRF 취약점이 존재하는 django 코드입니다.",
      "content": "const mysql = require(\"mysql\");\n// 커넥션 초기화 옵션은 생략함\nconst connection = mysql.createConnection(...);\nrouter.get(\"/vuln/email\", (req, res) => {\n const con = connection;\n const userInput = req.query.id;\n const query = `SELECT email FROM user WHERE user_id = ${userInput}`;\n con.query(query,\n (err, result) => {\n if (err) console.log(err);\n return res.send(result);\n }\n );\n});",
      "hint": "‘1 UNION SELECT group_concat(table_name) FROM information_schema.tables WHERE table_schema = database();’ 와 같은 공격문을 전달할 경우 데이터베이스 내의 모든 테이블 이름이 조회되고 이는 곧 공격자가 원하는 모든 쿼리를 실행 가능",
      "user_answer": "",
      "correct_answer": "SELECT email FROM user WHERE user_id =",
      "difficulty": "하",
      "status": "풀이하기",
      "tags": "nodejs, sql-injection"
    }
  },
  {
    "model": "solve.SecureCodingQuestion",
    "fields": {
      "title": "File Download",
      "type": "file-download",
      "intro": "File Download로 당신의 시스템이 공격당할 수 있습니다!",
      "content": "const mysql = require(\"mysql\");\n// 커넥션 초기화 옵션은 생략함\nconst connection = mysql.createConnection(...);\nrouter.get(\"/vuln/email\", (req, res) => {\n const con = connection;\n const userInput = req.query.id;\n const query = `SELECT email FROM user WHERE user_id = ${userInput}`;\n con.query(query,\n (err, result) => {\n if (err) console.log(err);\n return res.send(result);\n }\n );\n});",
      "hint": "‘1 UNION SELECT group_concat(table_name) FROM information_schema.tables WHERE table_schema = database();’ 와 같은 공격문을 전달할 경우 데이터베이스 내의 모든 테이블 이름이 조회되고 이는 곧 공격자가 원하는 모든 쿼리를 실행 가능",
      "user_answer": "",
      "correct_answer": "SELECT email FROM user WHERE user_id =",
      "difficulty": "하",
      "status": "풀이하기",
      "tags": "nodejs, sql-injection"
    }
  }
]
