from selenium import webdriver
from django.db import connection
from enum import Enum
import re
import urllib


class solveType(Enum):
    SOLVE = 0
    WRONG = 1
    UNSOLVE = 2


def read_url(url, cookie):
    print(url)    
    options = webdriver.ChromeOptions()
    try:
        for _ in [
            "headless",
            "window-size=1920x1080",
            "disable-gpu",
            "no-sandbox",
            "disable-dev-shm-usage",
        ]:
            options.add_argument(_)
        driver = webdriver.Chrome(options=options)
        driver.implicitly_wait(3)
        driver.set_page_load_timeout(3)
        driver.get('http://127.0.0.1:8000')
        driver.add_cookie(cookie)
        driver.get(url)
    except Exception as e:
        driver.quit()
        return
    driver.quit()
    return


def textfilter(text):
    _filter = ["s\\W*c\\W*r\\W*i\\W*p\\W*t",#script
        "o\\W*n",#on
        "j\\W*a\\W*v\\W*a\\W*s\\W*c\\W*r\\W*i\\W*p\\W*t\\W*:"]#javascript:
    for f in _filter:
        text = re.sub(f, "", text, flags=re.IGNORECASE)
    return text


def textfilter2(text):
    _filter = ["script", "on", "javascript"]
    for f in _filter:
        if f in text.lower():
            return "filtered!!!"

    advanced_filter = ["window", "self", "this", "document", "location", "(", ")", "&#"]
    for f in advanced_filter:
        if f in text.lower():
            return "filtered!!!"
    return text


def textfilter3(text):
    _filter = [
        "s\\W*c\\W*r\\W*i\\W*p\\W*t",
        "o\\W*n",
        "j\\W*a\\W*v\\W*a\\W*s\\W*c\\W*r\\W*i\\W*p\\W*t\\W*:",
        "w\\W*i\\W*n\\W*d\\W*o\\W*w",
        "s\\W*e\\W*l\\W*f",
        "t\\W*h\\W*i\\W*s",
        "d\\W*o\\W*c\\W*u\\W*m\\W*e\\W*n\\W*t",
        "l\\W*o\\W*c\\W*a\\W*t\\W*i\\W*o\\W*n"
    ]
    for f in _filter:
        text = re.sub(f, "", text, flags=re.IGNORECASE)
    return text
    

def sqlInjection(request, question):
    successful = solveType.UNSOLVE.value
    if request.method == 'POST':
        username = request.POST.get('username')
        password = request.POST.get('password')
        with connection.cursor() as cursor:
            cursor.execute("SELECT * FROM solve_sqlinj_1 WHERE username = '%s' AND password = '%s'" % (username, password))
            user = cursor.fetchone()
            print(user)
        if user:
            request.session['user_id'] = user[1]
            is_superuser = user[3]
            if is_superuser:
                successful = solveType.SOLVE.value
                question.status = "풀이 완료"
                question.save()
            else:
                successful = solveType.WRONG.value
        else:
            successful = solveType.WRONG.value
    print(successful)
    return successful, question


def xss1(request, question):
    successful = solveType.UNSOLVE.value
    text = request.GET.get('pleaseCookie', '쿠키를 넣어주세요')
    param = request.GET.get('param', 'default')
    if request.method == "POST":
        param = request.POST.get('param', 'default')
        url = f"http://127.0.0.1:8000/xss_vuln?param={urllib.parse.quote(param)}"
        cookie = {"name": "mycookie", "value": "cookie_value"}
        read_url(url, cookie)
    if(text == 'mycookie=cookie_value'):
        print("solve")
        successful = solveType.SOLVE.value
        question.status = "풀이 완료"
        question.save()
    else :
        successful = solveType.UNSOLVE.value
    return successful, question


def xss_filter(request, question):
    successful = solveType.UNSOLVE.value
    text = request.GET.get('pleaseCookie', '쿠키를 넣어주세요')
    if request.method == "POST":
        param = request.POST.get('param', 'default')
        url = f"http://127.0.0.1:8000/xss_vuln_filter?param={urllib.parse.quote(param)}"
        cookie = {"name": "mycookie", "value": "cookie_value"}
        read_url(url, cookie)
    if(text == 'mycookie=cookie_value'):
        print("solve")
        successful = solveType.SOLVE.value
        question.status = "풀이 완료"
        question.save()
    else :
        successful = solveType.UNSOLVE.value
    return successful, question

def xss_filter2(request, question):
    successful = solveType.UNSOLVE.value
    text = request.GET.get('pleaseCookie', '쿠키를 넣어주세요')
    if request.method == "POST":
        param = request.POST.get('param', 'default')
        url = f"http://127.0.0.1:8000/xss_vuln_filter2?param={urllib.parse.quote(param)}"
        cookie = {"name": "mycookie", "value": "cookie_value"}
        read_url(url, cookie)
    print(text)
    if(text == 'mycookie=cookie_value'):
        print("solve")
        successful = solveType.SOLVE.value
        question.status = "풀이 완료"
        question.save()
    else :
        successful = solveType.UNSOLVE.value
    return successful, question